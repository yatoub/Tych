#!/usr/bin/env python3
"""
Script standalone pour ex√©cuter les tests du projet Tych.

Ce script permet de lancer les tests sans avoir besoin d'installer pytest
s√©par√©ment ou de configurer un environnement de d√©veloppement complexe.

Usage:
    python run_tests.py                    # Tous les tests
    python run_tests.py -v                 # Mode verbose
    python run_tests.py -k test_pendulum   # Tests sp√©cifiques
    python run_tests.py --unit             # Tests unitaires uniquement
    python run_tests.py --integration      # Tests d'int√©gration uniquement
    python run_tests.py --fast             # Tests rapides (sans slow)
    python run_tests.py --coverage         # Avec couverture de code
    python run_tests.py --help             # Aide
"""

import sys
import os
import subprocess
import argparse
from pathlib import Path


def get_project_root():
    """Retourne le r√©pertoire racine du projet."""
    return Path(__file__).parent.absolute()


def check_dependencies():
    """V√©rifie que les d√©pendances n√©cessaires sont install√©es."""
    required_packages = ['pytest', 'numpy', 'matplotlib', 'scipy']
    missing_packages = []
    
    for package in required_packages:
        try:
            __import__(package)
        except ImportError:
            missing_packages.append(package)
    
    if missing_packages:
        print(f"‚ùå D√©pendances manquantes: {', '.join(missing_packages)}")
        print("Installez-les avec:")
        print(f"pip install {' '.join(missing_packages)}")
        return False
    
    return True


def run_tests(args):
    """Ex√©cute les tests avec les arguments sp√©cifi√©s."""
    project_root = get_project_root()
    tests_dir = project_root / "tests"
    
    # Construction de la commande pytest
    cmd = [sys.executable, "-m", "pytest"]
    
    # Ajouter le r√©pertoire des tests
    cmd.append(str(tests_dir))
    
    # Options de base
    cmd.extend(["-v", "--tb=short", "--strict-markers", "--strict-config"])
    
    # Filtres par type de test
    if args.unit:
        cmd.extend(["-m", "unit"])
    elif args.integration:
        cmd.extend(["-m", "integration"])
    elif args.fast:
        cmd.extend(["-m", "not slow"])
    
    # Filtres par nom de test
    if args.keyword:
        cmd.extend(["-k", args.keyword])
    
    # Options de verbosit√©
    if args.verbose:
        cmd.append("-vv")
    elif args.quiet:
        cmd.append("-q")
    
    # Couverture de code
    if args.coverage:
        try:
            __import__('pytest_cov')
            cmd.extend([
                "--cov=tych",
                "--cov-report=term-missing",
                "--cov-report=html:htmlcov",
                "--cov-fail-under=80"
            ])
        except ImportError:
            print("‚ö†Ô∏è  pytest-cov non install√©, couverture d√©sactiv√©e")
    
    # Parall√©lisation si pytest-xdist est disponible
    if args.parallel:
        try:
            __import__('pytest_xdist')
            cmd.extend(["-n", str(args.parallel)])
        except ImportError:
            print("‚ö†Ô∏è  pytest-xdist non install√©, parall√©lisation d√©sactiv√©e")
    
    # Arr√™t au premier √©chec
    if args.fail_fast:
        cmd.append("-x")
    
    # Options suppl√©mentaires
    if args.pytest_args:
        cmd.extend(args.pytest_args)
    
    print(f"üöÄ Ex√©cution des tests...")
    print(f"üìÅ R√©pertoire: {tests_dir}")
    print(f"üîß Commande: {' '.join(cmd)}")
    print("-" * 50)
    
    # Ex√©cution
    try:
        result = subprocess.run(cmd, cwd=project_root)
        return result.returncode
    except KeyboardInterrupt:
        print("\n‚ùå Tests interrompus par l'utilisateur")
        return 1
    except Exception as e:
        print(f"‚ùå Erreur lors de l'ex√©cution des tests: {e}")
        return 1


def main():
    """Point d'entr√©e principal."""
    parser = argparse.ArgumentParser(
        description="Ex√©cuteur de tests standalone pour Tych",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Exemples d'utilisation:
  python run_tests.py                    # Tous les tests
  python run_tests.py -v                 # Mode verbose
  python run_tests.py -k pendulum        # Tests contenant "pendulum"
  python run_tests.py --unit             # Tests unitaires seulement
  python run_tests.py --fast             # Tests rapides (sans slow)
  python run_tests.py --coverage         # Avec couverture de code
  python run_tests.py --parallel 4       # Tests en parall√®le (4 workers)
  python run_tests.py -x                 # Arr√™t au premier √©chec
        """
    )
    
    # Filtres de tests
    test_group = parser.add_argument_group("Filtres de tests")
    test_group.add_argument(
        "--unit", 
        action="store_true",
        help="Ex√©cuter uniquement les tests unitaires"
    )
    test_group.add_argument(
        "--integration", 
        action="store_true",
        help="Ex√©cuter uniquement les tests d'int√©gration"
    )
    test_group.add_argument(
        "--fast", 
        action="store_true",
        help="Ex√©cuter uniquement les tests rapides (exclut les tests marqu√©s 'slow')"
    )
    test_group.add_argument(
        "-k", "--keyword",
        help="Ex√©cuter uniquement les tests correspondant au mot-cl√©"
    )
    
    # Options d'affichage
    display_group = parser.add_argument_group("Options d'affichage")
    display_group.add_argument(
        "-v", "--verbose", 
        action="store_true",
        help="Mode verbose (plus de d√©tails)"
    )
    display_group.add_argument(
        "-q", "--quiet", 
        action="store_true",
        help="Mode silencieux (moins de sortie)"
    )
    
    # Options de performance
    perf_group = parser.add_argument_group("Options de performance")
    perf_group.add_argument(
        "--parallel", 
        type=int, 
        metavar="N",
        help="Nombre de workers pour l'ex√©cution en parall√®le"
    )
    perf_group.add_argument(
        "-x", "--fail-fast", 
        action="store_true",
        help="Arr√™ter √† la premi√®re erreur"
    )
    
    # Options de couverture
    coverage_group = parser.add_argument_group("Options de couverture")
    coverage_group.add_argument(
        "--coverage", 
        action="store_true",
        help="G√©n√©rer un rapport de couverture de code"
    )
    
    # Options avanc√©es
    advanced_group = parser.add_argument_group("Options avanc√©es")
    advanced_group.add_argument(
        "--pytest-args", 
        nargs=argparse.REMAINDER,
        help="Arguments suppl√©mentaires √† passer √† pytest"
    )
    advanced_group.add_argument(
        "--check-deps", 
        action="store_true",
        help="V√©rifier les d√©pendances et quitter"
    )
    
    args = parser.parse_args()
    
    # V√©rification des d√©pendances
    if args.check_deps:
        if check_dependencies():
            print("‚úÖ Toutes les d√©pendances sont install√©es")
            return 0
        else:
            return 1
    
    # V√©rification des d√©pendances avant l'ex√©cution
    if not check_dependencies():
        return 1
    
    # Validation des arguments
    if args.unit and args.integration:
        print("‚ùå Erreur: --unit et --integration sont mutuellement exclusifs")
        return 1
    
    if args.verbose and args.quiet:
        print("‚ùå Erreur: --verbose et --quiet sont mutuellement exclusifs")
        return 1
    
    # Information sur l'environnement
    print("üî¨ Tych Test Runner")
    print(f"üêç Python: {sys.version}")
    print(f"üìç R√©pertoire: {get_project_root()}")
    
    # Ex√©cution des tests
    return run_tests(args)


if __name__ == "__main__":
    sys.exit(main())
